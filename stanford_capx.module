<?php
/**
 * @file
 * @author [author]
 *
 */

// Make sure this is loaded.
require_once "includes/autoloader.php";
require_once "includes/vendor/autoload.php";
require_once "stanford_capx.entity.hooks.inc";

use CAPx\APILib\HTTPClient;
use CAPx\Drupal\Importer\EntityImporter;
use CAPx\Drupal\Mapper\EntityMapper;
use CAPx\Drupal\Util\CAPx;

/**
 * Implements hook_help().
 */
function stanford_capx_help($path, $arg) {
  switch ($path) {
    case 'admin/capx':
      return '<p>' . t('Contact %email', array('%email' => l('email', 'mailto:no-reply@stanford.edu'))) . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function stanford_capx_permission() {
  return array(
    'administer capx' =>  array(
      'title' => t('Administer CAPx'),
      'description' => t('Administer and Configure CAPx settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function stanford_capx_menu() {

  $items['admin/config/capx'] = array(
    'title' => 'Administer CAPx',
    'page callback' => 'stanford_capx_admin_config',
    'access arguments' => array('administer capx'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  return $items;
}

/**
 * [stanford_capx_admin_config description]
 * @return [type] [description]
 */
function stanford_capx_admin_config() {
  $output = "";

  $username = variable_get('stanford_capx_username', '');
  $password = variable_get('stanford_capx_password', '');
  $token    = variable_get('stanford_capx_token', '');

  $connection = CAPx::testConnectionToken($token);

  if (!$connection->value) {
    $client = new HTTPClient();
    $response = $client->api('auth')->authenticate($username, $password);
    if ($response) {
      $token = $response->getAuthApiToken();
      variable_set('stanford_capx_token', $token);
    }
    else {
      throw new \Exception("Could not authenticate with API server.");
    }
  }

  $importer_config = array();
  $importer_config['type']    = "uids";
  // @todo: Currently ptchen doesn't return any data. Need to report this somehow.
  $importer_config['values']  = array('sheamck','swberg','jbickar','cjwest','ptchen');

  $mapper_config = array();
  $mapper_config['entityType']  = 'node';
  $mapper_config['bundleType']  = 'faux';
  $mapper_config['fields']      = array();
  $mapper_config['properties']  = array();

  // Patch the fields together

  // This setting is exactly the same as the commented out line below.
  $mapper_config['fields']['body']                          = '$.bio.html';
  // $mapper_config['fields']['body']                          = array('value' => '$.bio.html');

  $mapper_config['fields']['field_faux_bool_one']           = "$.affiliations.capFaculty";
  $mapper_config['fields']['field_faux_bool_two']           = "$.affiliations.capStaff";

  $mapper_config['fields']['field_faux_date_date']          = "$.lastModified";
  $mapper_config['fields']['field_faux_date_date_two']      = "$.lastModified";
  $mapper_config['fields']['field_faux_date_iso']           = "$.lastModified";
  $mapper_config['fields']['field_faux_date_iso_two']       = "$.lastModified";
  $mapper_config['fields']['field_faux_date_unix']          = "$.lastModified";
  $mapper_config['fields']['field_faux_date_pop']           = "$.lastModified";

  $mapper_config['fields']['field_faux_decimal']            = "$.presentations.location.latitude";
  $mapper_config['fields']['field_faux_email']              = "$.primaryContact.email";
  $mapper_config['fields']['field_faux_file']               = "$.profilePhotos.big";
  $mapper_config['fields']['field_faux_float']              = "$.presentations.location.latitude";
  $mapper_config['fields']['field_faux_image']              = "$.profilePhotos.bigger";
  $mapper_config['fields']['field_faux_integer']            = "$.professionalOrganizations.startYear.text";

  // Example of how to handle a field with multiple values
  $mapper_config['fields']['field_faux_link']               = array("title" => "$.shortTitle.label.text",
                                                                    "url"   => "$.profilePhotos.big.url");
  $mapper_config['fields']['field_faux_list_float']         = "$.universityId";
  $mapper_config['fields']['field_faux_list_int']           = "$.profileId";
  $mapper_config['fields']['field_faux_list_text']          = "$.shortTitle.label.text";
  $mapper_config['fields']['field_faux_long_text']          = "$.currentRoleAtStanford";
  $mapper_config['fields']['field_faux_long_text_summary']  = array('value' => '$.currentRoleAtStanford',
                                                                    'summary' => '$.bio.html');
  // Terms
  $mapper_config['fields']['field_faux_tax_term']           = "$.affiliations";
  $mapper_config['fields']['field_faux_tax_term_select']    = "$.professionalInterests.text";
  // $mapper_config['fields']['field_faux_tax_term_auto']      = "";

  $mapper_config['fields']['field_faux_text']               = "$.shortTitle.label.text";

  // Put up the properties
  $mapper_config['properties']['title'] = '$.displayName';

  $mapper = new EntityMapper($mapper_config);

  $client = new HTTPClient();
  $client->setApiToken($token);

  $importer = new EntityImporter($importer_config, $mapper, $client);
  $importer->execute();

  // BEANS!
  // ---------------------------------------------------------------------------

  // $mapper_config = array();
  // $mapper_config['entityType']  = 'bean';
  // $mapper_config['bundleType']  = 'profile';
  // $mapper_config['fields']      = array();
  // $mapper_config['properties']  = array();

  // // Patch the fields together
  // $mapper_config['fields']['field_bio'] = '$.bio.html';

  // // Put up the properties
  // $mapper_config['properties']['title'] = '$.displayName';
  // $mapper_config['properties']['label'] = '$.displayName';


  // $mapper = new EntityMapper($mapper_config);
  // $importer = new EntityImporter($importer_config, $mapper, $client);
  // $importer->execute();

  return $output;
}
